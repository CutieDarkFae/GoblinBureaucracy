import React, { useState } from 'react';
import FormField from './GoblinBureaucracy/FormField';

interface FormLevel {
    level: number;
    parts: number[]; // distribution chart for how many parts a form will have at this level of the bureaucracy
}

const formLevels: FormLevel[] = [{
    level: 1,
    parts: [5, 4, 4, 4, 3]
}, {
    level: 2,
    parts: [1, 2, 3, 3, 4]
}, {
    level: 3,
    parts: [1, 1, 2, 2, 3]
}, {
    level: 4,
    parts: [1, 1, 1, 1, 1]
}];



class FormPart {
    id: string;
    partNumberOnForm: Number;
    fields: FormField[];
    stamped: boolean = false;
}

export class Form {
    id: string;
    language: Language;
    parts: FormPart[];
}

export class Language {
    id: number;
    name: string;
    description: string;
    charset: string;
}

export const languages: Language[] = [{
    id: 0,
    name: 'Common',
    description: 'The common trade language, spoken by most everybody',
    charset: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-,.!'
}, {
    id: 1,
    name: 'Goblinese',
    description: 'The language of Goblins',
    charset: 'ᚠᚢᚦᚨᚱᚲᚷᚹᚺᚾᛁᛃᛈᛇᛉᛊᛏᛒᛖᛗᛚᛜᛞᛟ'
}];

const letters: string = 'ABCEFGHIJKLMNOPQRSTUVWXYZ'; // english as we want the pc's to understand.
const generateRandomFormId = ((numNumbers: number, numChars: number): string => {
    let parts = [];
    for (let i = 0; i < numNumbers; i++) {
        parts.push(Math.floor(Math.random() * 10));
    }
    for (let i = 0; i < numChars; i++) {
        parts.push(letters.charAt(Math.floor(Math.random() * letters.length)));
    }
    return parts.join('');
});

const numFieldsInAPart: number[] = [4, 6, 8, 10, 12, 10, 12, 14];
export const generateForm = ((level: number, name: string, language: Language): Form => {
    var form: Form = new Form();
    // generate an id for this form
    form.id = generateRandomFormId(level, level / 2);
    const numParts = formLevels[level].parts[Math.floor(Math.random() * 5)];
    for (let i = 0; i < numParts; i++) {
        form.parts.push(generateFormPart(i, numFieldsInAPart[Math.floor(Math.random() * numFieldsInAPart.length)], language));
    }
    return form;
});

const generateFormPart = ((partNumber: number, numFields: number, language: Language): FormPart => {
    var part: FormPart = new FormPart();

    part.id = generateRandomFormId(2, 1);
    part.partNumberOnForm = partNumber;
    for (let i = 0; i < numFields; i++) {
        part.fields.push(generateFormPartField(language));
    }
    return part;
});

const fieldLengths: number[] = [2, 3, 3, 4, 4, 4, 5];
const generateFormPartField = ((language: Language): FormField => {
    var field: FormField = new FormField();
    const length = fieldLengths[Math.floor(Math.random() * fieldLengths.length)]
    let parts = [];
    for (let i = 0; i < length; i++) {
        parts.push(language.charset.charAt(Math.floor(Math.random() * language.charset.length)));
    }
    field.label = parts.join('');
    field.value = "";

    return field;
});